name: CI/CD Pipeline for Inventory App

on:
  push:
    branches:
      - main
    paths:
      - 'main.py'

jobs:
  test:
    name: Run Automated Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Execute tests with pytest
        run: pytest -q

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      # ✅ Force owner and repo names to lowercase
      - name: Convert to lowercase
        id: lc
        run: |
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO=$(basename "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "owner=$OWNER" >> $GITHUB_OUTPUT
          echo "repo=$REPO" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image to GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ steps.lc.outputs.owner }}/${{ steps.lc.outputs.repo }}/inventory-app:${{ github.sha }}
            ghcr.io/${{ steps.lc.outputs.owner }}/${{ steps.lc.outputs.repo }}/inventory-app:latest

  deploy-to-ec2:
    name: Deploy to AWS EC2 (with built-in rollback)
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 host to known_hosts
        run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # ✅ Convert to lowercase again for EC2 deploy path
      - name: Lowercase repo/owner for GHCR path
        id: repo_vars
        run: |
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO=$(basename "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "owner=$OWNER" >> $GITHUB_OUTPUT
          echo "repo=$REPO" >> $GITHUB_OUTPUT

      - name: Connect and Deploy to EC2
        env:
          IMAGE_SHA: ghcr.io/${{ steps.repo_vars.outputs.owner }}/${{ steps.repo_vars.outputs.repo }}/inventory-app:${{ github.sha }}
          GHCR_USER: ${{ github.actor }}
          GHCR_PAT: ${{ secrets.GITHUB_TOKEN }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USERNAME }}
        run: |
          ssh "$EC2_USER@$EC2_HOST" IMAGE_SHA="$IMAGE_SHA" GHCR_USER="$GHCR_USER" GHCR_PAT="$GHCR_PAT" 'bash -seu' << 'EOF'
            set -euo pipefail

            CONTAINER=inventory-app
            HEALTH_URL=http://localhost:5000/
            LAST=.last_good
            PREV=.prev_good

            echo "Pulling image: $IMAGE_SHA ..."
            echo "$GHCR_PAT" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            docker pull "$IMAGE_SHA"

            echo "Stopping existing container..."
            docker rm -f "$CONTAINER" 2>/dev/null || true

            echo "Starting new container..."
            docker run -d --name "$CONTAINER" -p 5000:5000 "$IMAGE_SHA"

            echo "Running health check..."
            for i in {1..10}; do
              if curl -fs http://localhost:5000/ >/dev/null; then
                echo "✅ New version healthy!"
                mv "$LAST" "$PREV" 2>/dev/null || true
                echo "$IMAGE_SHA" > "$LAST"
                exit 0
              fi
              sleep 3
            done

            echo "❌ New version unhealthy. Rolling back..."
            if [ -f "$PREV" ]; then
              PREV_IMG=$(cat "$PREV")
              docker rm -f "$CONTAINER" 2>/dev/null || true
              docker run -d --name "$CONTAINER" -p 5000:5000 "$PREV_IMG"
              echo "✅ Rolled back to $PREV_IMG"
            else
              echo "⚠️ No previous image found to rollback."
              exit 1
            fi
          EOF
